#!/bin/sh

name="${1:-"[[:alpha:]_][[:alnum:]_]*"}"
ext="${2#.}"

files() {
    if command -v git > /dev/null && git rev-parse 2> /dev/null; then
        git ls-files --cached --others --exclude-standard | grep "\.$1$"
    else
        find -L . -name ".?*" -prune -o -type f -name "*.$1" -print |
            sed 's|^\./||'
    fi
}

quote() {
    paste -d'"' /dev/null - /dev/null
}

case "$ext" in
    py|zero) RE="^[[:blank:]]*def[[:blank:]]*${name}[[:blank:]]*\(";;
    js|ts|lua|awk) RE="^[[:blank:]]*function[[:blank:]]*${name}[[:blank:]]*\(";;
    sh) RE="^[[:blank:]]*${name}[[:blank:]]*\([[:blank:]]*\)";;
    rs) RE="^[[:blank:]]*fn[[:blank:]]*${name}[[:blank:]]*\(";;
    go) RE="^func[[:blank:]]*${name}[[:blank:]]*\(";;
    *) RE="^([^[:space:]#{/][^#{/]*[[:blank:]])?${name}[[:blank:]]*\(";;
esac

# quote prevents xargs from splitting paths containing spaces
# this approach is used because the -0 and -d xargs flags are not posix
# paths containing double quotes are not supported
# the /dev/null argument to grep ensures that grep prints file paths even
# if just one file is given in an invocation
files "${ext:-c}" | quote | xargs grep -n -E "$RE" /dev/null
